def affine_encrypt(text, a, b):
def encrypt_char(char):
if char.isalpha():
base = 65 if char.isupper() else 97
return chr((a * (ord(char) - base) + b) % 26 + base)
return char

return ''.join(encrypt_char(char) for char in text)

def affine_decrypt(ciphertext, a, b):
def mod_inverse(x, mod):
for i in range(1, mod):
if (x * i) % mod == 1:
return i
return None

inv_a = mod_inverse(a, 26)
if inv_a is None:
raise ValueError("Invalid 'a' value; no modular inverse exists.")

def decrypt_char(char):
if char.isalpha():
base = 65 if char.isupper() else 97
return chr((inv_a * (ord(char) - base - b)) % 26 + base)
return char

return ''.join(decrypt_char(char) for char in ciphertext)

plaintext = "HELLO"
a = 5
b = 8

if a % 2 == 0 or a % 13 == 0:
raise ValueError("Invalid 'a' value. 'a' must be coprime with 26.")

ciphertext = affine_encrypt(plaintext, a, b)
print("Affine Encrypted Text:", ciphertext)
decrypted_text = affine_decrypt(ciphertext, a, b)
print("Affine Decrypted Text:", decrypted_text)
